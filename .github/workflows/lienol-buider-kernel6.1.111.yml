#
# https://github.com/P3TERX/Actions-OpenWrt
#
# File: .github/workflows/openwrt-bulder.yml
# Description: Build OpenWrt using GitHub Actions
#
# Copyright (c) 2019-2024 P3TERX <https://p3terx.com>
#
# This is free software, licensed under the MIT License.
# See /LICENSE for more information.
#

name: Lienol Builder Kernel6.1

on:
  repository_dispatch:
  workflow_dispatch:

env:
  REPO_URL: https://github.com/Lienol/openwrt
  REPO_BRANCH: 23.05   # main  23.05  22.03  21.02 19.07 employ 其中employ为项目默认项 ,除23.05配ubunt22.04编译固件插件能正常工作，其余不是编译报错，就是固件的插件工作不正常。
  FEEDS_CONF: feeds.conf.default
  CONFIG_FILE: lienol.config
  DIY_P1_SH: diy-lienol1.sh
  DIY_P2_SH: diy-lienol2.sh
  UPLOAD_BIN_DIR: false
  UPLOAD_FIRMWARE: true
  UPLOAD_RELEASE: true
  TZ: Asia/Shanghai

jobs:
  build:
    runs-on: ubuntu-22.04                               #ubuntu-latest   #ubuntu-22.04

    steps:
    - name: Checkout
      uses: actions/checkout@main

    - name: Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc /opt/hostedtoolcache/CodeQL
        sudo docker image prune --all --force
        sudo -E apt-get -qq update
        #sudo -E apt-get -qq install ack antlr3 asciidoc autoconf automake autopoint binutils bison build-essential bzip2 ccache cmake cpio curl device-tree-compiler fastjar flex gawk gettext gcc-multilib g++-multilib git gperf haveged help2man intltool libc6-dev-i386 libelf-dev libfuse-dev libglib2.0-dev libgmp3-dev libltdl-dev libmpc-dev libmpfr-dev libncurses5-dev libncursesw5-dev libpython3-dev libreadline-dev libssl-dev libtool lrzsz mkisofs msmtp ninja-build p7zip p7zip-full patch pkgconf python2.7 python3 python3-pyelftools python3-setuptools qemu-utils rsync scons squashfs-tools subversion swig texinfo uglifyjs upx-ucl unzip vim wget xmlto xxd zlib1g-dev
        sudo -E apt-get -qq install ack antlr3 asciidoc autoconf automake autopoint binutils bison build-essential bzip2 ccache cmake cpio curl device-tree-compiler fastjar flex gawk gettext gcc-multilib g++-multilib git gperf haveged help2man intltool libc6-dev-i386 libelf-dev libfuse-dev libglib2.0-dev libgmp3-dev libltdl-dev libmpc-dev libmpfr-dev libncurses5-dev libncursesw5-dev libpython3-dev libreadline-dev libssl-dev libtool lrzsz mkisofs msmtp ninja-build p7zip p7zip-full patch pkgconf python2.7 python3 python3-pyelftools python3-setuptools qemu-utils rsync scons squashfs-tools subversion swig texinfo uglifyjs upx-ucl unzip vim wget xmlto xxd zlib1g-dev libc-dev libz-dev perl
        sudo -E apt-get -qq autoremove --purge
        sudo -E apt-get -qq clean
        sudo timedatectl set-timezone "$TZ"
        sudo mkdir -p /workdir
        sudo chown $USER:$GROUPS /workdir
    
    - name: list disk space
      run: |
        df -hT $PWD
    
    - name: 释放Ubuntu磁盘空间
      uses: jlumbroso/free-disk-space@main
      with:
        # this might remove tools that are actually needed,
        # if set to "true" but frees about 6 GB
        tool-cache: true
        # all of these default to true, but feel free to set to
        # "false" if necessary for your workflow
        android: true
        dotnet: true
        haskell: true
        large-packages: true
        swap-storage: true
   
    - name: list disk space
      run: |
        df -hT $PWD
  
    - name: Clone source code
      working-directory: /workdir
      run: |
        df -hT $PWD
        git clone $REPO_URL -b $REPO_BRANCH openwrt
        ln -sf /workdir/openwrt $GITHUB_WORKSPACE/openwrt
        cd openwrt
        ls -al include
        #git checkout f68dcce3bb2a5d1043db7282809ef9b197dec99a   #指定内核到kernel6.1分支上,这个分支没有和目录include目录下以kernel-6.1文件中的LINUX_KERNEL_HASH-6.1.109 =值一样，若要用这个分支编译，必须更改kernel-6.1的内容。 
        #git checkout 85161b432f7b72f56063125e79f8c95792c3290e    # 改6.6.52      这个6.1.109 fe4573ab07e019e0af4ec5cfff508a5177638639  指定6.6.62后，竟然linux系统编译报错，妖精！！！ 注释了再看看
        cat target/linux/x86/Makefile
        #sed -i 's/\(KERNEL_PATCHVER: *= *\).*/\16.6/' target/linux/x86/Makefile         #内核编译文件Makefile版本指定到6.6上
        

    - name: Load custom feeds
      run: |
        [ -e $FEEDS_CONF ] && mv $FEEDS_CONF openwrt/feeds.conf.default
        chmod +x $DIY_P1_SH
        cd openwrt
        $GITHUB_WORKSPACE/$DIY_P1_SH

    - name: Update feeds
      run: cd openwrt && ./scripts/feeds update -a

    - name: Install feeds
      run: cd openwrt && ./scripts/feeds install -a

    - name: 更换go版本到default的23.x
      run: |
         cd openwrt
         rm -rf feeds/packages/lang/golang
         git clone https://github.com/sbwml/packages_lang_golang -b 23.x feeds/packages/lang/golang

    - name: Load custom configuration
      run: |
        [ -e files ] && mv files openwrt/files
        [ -e $CONFIG_FILE ] && mv $CONFIG_FILE openwrt/.config
        chmod +x $DIY_P2_SH
        cd openwrt
        $GITHUB_WORKSPACE/$DIY_P2_SH

    - name: Download package
      id: package
      run: |
        cd openwrt
        cat target/linux/x86/Makefile       #检查显示编译前的内核版本情况设置是否变化
        ls -al include
        make defconfig
        make download -j8
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;
        ls -al include
        
    - name: Compile the firmware
      id: compile
      run: |
        cd openwrt
        echo -e "$(nproc) thread compile"
        make -j$(nproc) || make -j1 || make -j1 V=s
        echo "status=success" >> $GITHUB_OUTPUT
        grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' > DEVICE_NAME
        [ -s DEVICE_NAME ] && echo "DEVICE_NAME=_$(cat DEVICE_NAME)" >> $GITHUB_ENV
        echo "FILE_DATE=_$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV

    - name: Check space usage
      if: (!cancelled())
      run: df -hT

    - name: Upload bin directory
      uses: actions/upload-artifact@main
      if: steps.compile.outputs.status == 'success' && env.UPLOAD_BIN_DIR == 'true'
      with:
        name: OpenWrt_bin${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
        path: openwrt/bin

    - name: Organize files
      id: organize
      if: env.UPLOAD_FIRMWARE == 'true' && !cancelled()
      run: |
        cd openwrt/bin/targets/*/*
        if [ -n "$(ls *.img.gz)" ]; then
            #echo "KERNEL=$(cat *.manifest | grep kernel | grep = -m 1 | cut -d= -f2 | cut -d- -f1)" >> $GITHUB_ENV    #ubuntu交互模式下可用获得的结果，在这里的平台上却不能获得正确结果，下面一句在交互模式下不能获得的结果，在这里是输出正确的结果。
            echo "KERNEL=$(cat *.manifest | grep ^kernel | cut -d- -f2 | tr -d ' ')" >> $GITHUB_ENV                    #能输出正确的结果
            KERNEL1=$(cat *.manifest | awk '/^kernel/ {print $1}' | tr -d ' ')                                         #仅输出‘-’，不正确的结果
            echo "KERNEL1=$KERNEL1" >> $GITHUB_ENV
            echo "===========编译成功,准备上传==========="
            
          else
            echo "===========编译失败,继续暂停==========="
            echo "KERNEL=failure" >> $GITHUB_ENV
           
          fi
        rm -rf packages
        echo "FIRMWARE=$PWD" >> $GITHUB_ENV
        echo "status=success" >> $GITHUB_OUTPUT

    - name: Upload firmware directory
      uses: actions/upload-artifact@main
      if: steps.organize.outputs.status == 'success' && !cancelled()
      with:
        name: OpenWrt_firmware${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
        path: ${{ env.FIRMWARE }}

    - name: Generate release tag
      id: tag
      if: env.UPLOAD_RELEASE == 'true' && !cancelled()
      run: |
        echo "release_tag=$(date +"%Y.%m.%d-%H%M")" >> $GITHUB_OUTPUT
        touch release.txt
        [ ${UPLOAD_GOFILE} = true && ${{ steps.gofile.outputs.url }} ] && echo "🔗 [GoFile](${{ steps.gofile.outputs.url }})" >> release.txt
        echo "status=success" >> $GITHUB_OUTPUT
        pwd
        ls -la
        echo "------ 显示release.txt文件中内容：------"
        cat release.txt
               
    - name: Upload firmware to release
      uses: softprops/action-gh-release@master
      if: steps.tag.outputs.status == 'success' && !cancelled()
      env:
        GITHUB_TOKEN: ${{ secrets.REPO_TOKEN }}
      with:
        tag_name: ${{ steps.tag.outputs.release_tag }}
        body_path: release.txt
        files: ${{ env.FIRMWARE }}/*
        body: |
          ===Firmware for x86_64===
          ### 📒 固件信息
          - 💻 平台架构: x86_64                        
          - ⚽ 固件源码: ${{ env.REPO_URL }}
          - 💝 源码分支: ${{ env.REPO_BRANCH }}
          - 🚀 内核版本: ${{ env.KERNEL }}  
          - 🚀 内核版本1: ${{ env.KERNEL1 }}
          - 🌐 默认地址: 192.168.1.1
          - 🔑 默认密码: 空                
           
          ### 📒 插件列表:
          ```
          DockerMan
          iStore
          KMS server
          Openclash
          Passwall
          AdguardHome
          AutoTimeCtl
          NAS
          OpenVPN server
          ZeroTier
          Upnp
          ...
          
          

    - name: list disk space
      run: |
        df -hT $PWD

    - name: Delete workflow runs
      uses: Mattraks/delete-workflow-runs@main
      with:
        retain_days: 20
        keep_minimum_runs: 20

    - name: list disk space
      run: |
        df -hT $PWD

    #- name: Remove old Releases
    #  uses: dev-drprasad/delete-older-releases@master
    #  if: env.UPLOAD_RELEASE == 'true' && !cancelled()
    #  with:
    #    keep_latest: 3
    #    delete_tags: true
    #  env:
    #    GITHUB_TOKEN: ${{ secrets.REPO_TOKEN }}
